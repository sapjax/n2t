// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap;
    static int heapBase, tailIndex;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let heap = heapBase;
        let tailIndex = 0;
        let heap[0] = 0;  // next
        let heap[1] = 16383 - heapBase - 2; // heap size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int heapIndex, next, length, addr;

        let heapIndex = 0;
        let next = heap[0];
        let length = heap[1];

        // walk through freeList
        while((length < (size + 2)) & (next > 0)) {
            let heapIndex = next;
            let next = heap[heapIndex];
            let length = heap[heapIndex+1];
        }

        if(~(length < (size + 2))) {
            // set return block
            let addr = heapIndex + (length - size) + 2;
            let heap[addr-2] = 0;
            let heap[addr-1] = size;

            // set origin segment length
            let heap[heapIndex + 1] = length - size - 2;

            return addr + heapBase;
        } else {
            do Sys.error(999);
            return 0;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int heapIndex;

        // set segment
        let heapIndex = o - heapBase;
        // set tail segment next
        let heap[tailIndex] =  heapIndex - 2;
        // set appended segment next
        let heap[heapIndex - 2] = 0;
        return;
    }    
}
