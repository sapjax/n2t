// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 0;
        return;
    }

    /** Return whether the i'th bit of x is 1 */
    function boolean bit(int x, int i) {
        if(i < 15) {
            return (x & twoToThe[i]) = twoToThe[i];
        // avoid 2**15 overflow
        } else {
            return (x | twoToThe[i]) < 0;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if((x > 0) | (x = 0)) {
            return x;
        } else {
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i, bitWide, shiftedX;

        let sum = 0;
        let bitWide = 16;
        let i = 0;
        let shiftedX = x;


        while (i < bitWide) {
            // i'th bit of y is 1
            if(Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, one;

        let one = 1;

        if (x < 0) {
            let one = -one;
        }

        if(y < 0) {
            let one = -one;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        if((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.divide(x, 2 * y);

        if((x - (2 * q * y))  < y) {
            return one * 2 * q;
        } else {
            return one * (2 * q + 1);
        }
    }

    function int power(int x, int y) {
        while (y > 1) {
            let x = x * x;
            let y = y -1;
        }
        return x;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, n, twoToJ, squareY; 
        let y =0;
        let n = 16;
        let j = n/2 -1;

        while (~(j < 0)) {
            let twoToJ = twoToThe[j];
            let squareY = (y + twoToJ) * (y + twoToJ);
            if(~(squareY > x) & (squareY > 0)) {
                let y = y + twoToJ;
            }
            let j = j -1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b) {
            return a;
        } else {
            return b;
        }
    }
}
