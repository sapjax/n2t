// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=true, b=instruction[3], out=destM);
    And(a=true, b=instruction[4], out=destD);
    And(a=true, b=instruction[5], out=destA);

    Not(in = instruction[15], out = isAinstrc);
    Or(a   = destA,           b   = isAinstrc,       out = aLoad);
    And(a  = destM,           b   = instruction[15], out = writeM);
    And(a  = destD,           b   = instruction[15], out = dLoad);

    // jmp bits
    DMux8Way(in=true, sel=instruction[0..2], a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

    // pc load
    Not(in = ngOut, out = notNg);
    Not(in = zrOut, out = notZero);
    And(a  = notNg, b   = notZero, out = notNgOrZero);
    Or(a   = ngOut, b   = zrOut,   out = ngOrZero);

    
    And(a = null, b  = false,       out        = j0);
    And(a = JGT,  b  = notNgOrZero, out        = j1);
    And(a = JEQ,  b  = zrOut,       out        = j2);
    And(a = JGE,  b  = notNg,       out        = j3);
    And(a = JLT,  b  = ngOut,       out        = j4);
    And(a = JNE,  b  = notZero,     out        = j5);
    And(a = JLE,  b  = ngOrZero,    out        = j6);
    And(a = JMP,  b  = true,        out        = j7);

    Or8Way(in[0]=j0,in[1]=j1,in[2]=j2,in[3]=j3,in[4]=j4,in[5]=j5,in[6]=j6,in[7]=j7, out=pcLoad);

    And(a=instruction[15], b=pcLoad, out=pcLoadAndC);
    PC(in=aRegOut, load=pcLoadAndC, inc=true, reset=reset, out[0..14]=pc);

    // A register
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegIn);

    ARegister(in=aRegIn, load=aLoad, out=aRegOut,out[0..14]=addressM);

    // D registrer
    DRegister(in=aluOut, load=dLoad, out=dRegOut);

    // choise A or M as input to Alu
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aRegOutOrM);

    // ALU
    ALU(x=dRegOut, y=aRegOutOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zrOut, ng=ngOut);
}